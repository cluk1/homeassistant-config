sensor:
  - platform: template
    sensors:
      flats_heating_demand:
        friendly_name: "Wohnungen Heizbedarf"
        value_template: >
          {% set temp_actual = states('sensor.flats_avg_temperature') | float %}
          {% set temp_wanted = ( states('input_number.flat_temperature_setpoint') | float - states('input_number.flat_temperature_tolerance') | float ) %}
          {{ (temp_wanted - temp_actual) | round(1, "half", default=0) }}
      heatpump_cop:
        friendly_name: "Heatpump CoP"
        unique_id: heatpump_cop
        device_class: power_factor
        value_template: >
          {% set electricalPower =  states('sensor.ebusd_hmu_currentconsumedpower')|float %}
          {{ ( states('sensor.ebusd_hmu_currentyieldpower')|float + electricalPower) / electricalPower }}
binary_sensor:
  - platform: template
    sensors:
      flat1_humidity_too_high:
        friendly_name: "Wohnung 1 Luftfeuchte"
        value_template: >
          {{ states('sensor.juengst_luftfeuchtigkeit')|float >= states("input_number.flat_humidity_alert")|float }}
  - platform: template
    sensors:
      flat2_humidity_too_high:
        friendly_name: "Wohnung 2 Luftfeuchte"
        value_template: >
          {{ states('sensor.nunnenmacher_luftfeuchtigkeit')|float >= states("input_number.flat_humidity_alert")|float }}
  - platform: template
    sensors:
      flat3_humidity_too_high:
        friendly_name: "Wohnung 3 Luftfeuchte"
        value_template: >
          {{ states('sensor.ketterer_luftfeuchtigkeit')|float >= states("input_number.flat_humidity_alert")|float }}
